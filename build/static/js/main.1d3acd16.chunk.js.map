{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","GroceryItem","props","className","focusable","item","category","itemName","brand","type","aria-hidden","qty","GroceryList","this","items","onListClick","aria-label","onClick","map","index","key","handleItemClick","bind","event","console","log","React","Component","GroceryListArray","App","onItemClick","document","body","innerHTML","rootElement","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAc,SAACC,GAAD,OAAW,wBAC7BC,UAAU,6BAA6BC,UAAU,QAC/C,0BAAMD,UAAU,+BACd,0BAAMA,UAAU,sBAAhB,cACCD,EAAMG,KAAKC,UAEd,yBAAKH,UAAU,mCACb,wBAAIA,UAAU,2BAA2BD,EAAMG,KAAKE,UACpD,yBAAKJ,UAAU,2CACb,0BAAMA,UAAU,4BACd,0BAAMA,UAAU,sBAAhB,gBACCD,EAAMG,KAAKG,OAEd,0BAAML,UAAU,2BACd,0BAAMA,UAAU,sBAAhB,UACCD,EAAMG,KAAKI,QAIlB,0BAAMN,UAAU,kCACd,0BAAMA,UAAU,sBAAhB,cACA,0BAAMA,UAAU,yBAAyBO,cAAY,QAArD,UACA,0BAAMP,UAAU,0BAA0BD,EAAMG,KAAKM,IAArD,QAIAC,E,uKACM,IAAD,SACwBC,KAAKX,MAA5BY,EADD,EACCA,MAAOC,EADR,EACQA,YACf,OACE,yBAAKZ,UAAU,aACb,wBAAIa,aAAW,gBAAf,gBACA,uBAAGA,aAAW,eAAeb,UAAU,sBAAvC,2CACA,wBAAIA,UAAU,eAAec,QAASF,GACrCD,EAAMI,KAAI,SAACb,EAAMc,GAAP,OACT,kBAAC,EAAD,CAAad,KAAMA,EAAMe,IAAKD,EAAOF,QAAS,EAAKI,gBAAgBC,KAAK,EAAMjB,Y,sCAMtEA,EAAMkB,GAEpBC,QAAQC,IAAI,iBAAmBpB,EAAKE,c,GAjBdmB,IAAMC,WAsB1Bb,EAAQc,EAERC,EAAM,SAAC3B,GAAD,OAAW,kBAAC,EAAD,CACrBY,MAAOZ,EAAMY,MACbC,YAAa,SAACQ,GAAD,OAAWC,QAAQC,IAAI,kBACpCK,YAAa,SAACzB,EAAMkB,GAAYC,QAAQC,IAAIpB,EAAMkB,OAGpDQ,SAASC,KAAKC,UAAY,wBAC1B,IAAMC,EAAcH,SAASI,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,CAAKvB,MAAOA,IAAUoB,GDgEhC,kBAAmBI,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.1d3acd16.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport GroceryListArray from './groceries.json';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n// ************************ BEGIN GROCERY LIST\nconst GroceryItem = (props) => <li \n  className=\"grocery-list--item-wrapper\" focusable=\"true\">\n    <span className=\"grocery-list--item-category\">\n      <span className=\"screen-reader-only\">category: </span>\n      {props.item.category}\n    </span> \n    <div className=\"grocery-list--item-name-wrapper\">\n      <h2 className=\"grocery-list--item-name\">{props.item.itemName}</h2> \n      <div className=\"grocery-list--item-name-details-wrapper\">\n        <span className=\"grocery-list--item-brand\"> \n          <span className=\"screen-reader-only\">brand name: </span> \n          {props.item.brand}\n        </span>  \n        <span className=\"grocery-list--item-type\"> \n          <span className=\"screen-reader-only\">type: </span>\n          {props.item.type}\n        </span> \n      </div>\n    </div>\n    <span className=\"grocery-list--item-qty-wrapper\">\n      <span className=\"screen-reader-only\">quantity: </span> \n      <span className=\"grocery-list--item-qty\" aria-hidden=\"true\"> qty: </span>\n      <span className=\"grocery-list--item-qty\">{props.item.qty} </span> \n    </span>\n  </li>\n\nclass GroceryList extends React.Component {\n  render() {\n    const { items, onListClick } = this.props;\n    return (\n      <div className=\"container\">\n        <h1 aria-label=\"Grocery List\" >Grocery List</h1>\n        <p aria-label=\"Grocery List\" className=\"screen-reader-only\">Items listed below are needed groceries</p>\n        <ul className=\"grocery-list\" onClick={onListClick}>\n        {items.map((item, index) => \n          <GroceryItem item={item} key={index} onClick={this.handleItemClick.bind(this, item)}/>)}\n        </ul>\n      </div>\n    );\n  }\n  \n  handleItemClick(item, event) {\n    // Write your code here\n    console.log(\"Item clicked: \" + item.itemName );\n  }\n}\n\n\nconst items = GroceryListArray;\n\nconst App = (props) => <GroceryList\n  items={props.items}\n  onListClick={(event) => console.log(\"List clicked!\")}\n  onItemClick={(item, event) => { console.log(item, event) }}\n/>;\n\ndocument.body.innerHTML = \"<div id='root'></div>\";\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App items={items}/>, rootElement);\n\n// ************************ END GROCERY LIST\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}